<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bc.pmpheep.back.dao.WriterUserDao">
<<<<<<< HEAD
	<insert id="add" parameterType="WriterUser" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO writer_user
        (
        	username,
        	`password`,
        	is_disabled,
        	org_id,
        	`realname`,
        	sex,
        	birthday,
        	experience,
        	position,
        	title,
        	fax,
        	handphone,
        	telephone,
        	idcard,
        	email,
        	address,
        	postcode,	
        	rank,
        	is_teacher,
        	cert,
        	auth_time,
        	auth_user_type,
        	auth_user_id,
        	is_writer,
        	is_expert,
        	avatar,
        	note,
        	sort,
        	is_deleted,
        	gmt_create,
        	gmt_update
        )
        VALUES
        (
        	#{username,jdbcType=VARCHAR},
        	#{password,jdbcType=VARCHAR},
        	#{isDisabled,jdbcType=VARCHAR},
        	#{orgId,jdbcType=TINYINT},
        	#{realname,jdbcType=VARCHAR},
        	#{sex,jdbcType=TINYINT},
        	#{birthday,jdbcType=DATE},
        	#{experience,jdbcType=TINYINT},
        	#{position,jdbcType=VARCHAR},
        	#{title,jdbcType=VARCHAR},
        	#{fax,jdbcType=VARCHAR},
        	#{handphone,jdbcType=VARCHAR},
        	#{telephone,jdbcType=VARCHAR},
        	#{idcard,jdbcType=VARCHAR},
        	#{email,jdbcType=VARCHAR},
        	#{address,jdbcType=VARCHAR},
        	#{postcode,jdbcType=VARCHAR},
        	#{rank,jdbcType=TINYINT},
        	#{isTeather,jdbcType=TINYINT},
        	#{cert,jdbcType=VARCHAR},
        	#{authTime,jdbcType=DATE},
        	#{authUserType,jdbcType=TINYINT},
        	#{authUserId,jdbcType=BIGINT},
        	#{isWriter,jdbcType=TINYINT},
        	#{isExpert,jdbcType=TINYINT},
        	#{avatar,jdbcType=VARCHAR},
        	#{note,jdbcType=VARCHAR},
        	#{sort,jdbcType=TINYINT},
        	#{isDeleted,jdbcType=TINYINT},
        	#{gmtCreate,jdbcType=TIMESTAMP},
        	#{gmtUpdate,jdbcType=TIMESTAMP}
        );
    </insert>

    <!-- 动态更新对象的写法 -->
    <update id="update" parameterType="WriterUser">
        UPDATE writer_user
        <set>
            <if test="username != null and username!=''">
                username = #{username},
            </if>
            <if test="password != null and password!='' ">
                `password` = #{password},
            </if>
            <if test=" isDisabled!= null and isDisabled !=''">
                 is_disabled= #{isDisabled},
            </if>
            <if test="orgId != null and  orgId!=''">
                org_id = #{orgId},
            </if>
            <if test=" realname!= null and realname !=''">
                 realname= #{realname},
            </if>
            <if test=" sex!= null and  sex!=''">
                 sex= #{sex},
            </if>
            <if test=" birthday!= null and birthday !=''">
                 birthday= #{birthday},
            </if>
            <if test=" experience!= null and  experience!=''">
                experience = #{experience},
            </if>
            <if test=" position!= null and  position!=''">
                 position= #{position},
            </if>
            <if test=" title!= null and title !=''">
               title= #{title},
            </if>
            <if test=" fax!= null and  fax!=''">
                 fax= #{fax},
            </if>
            <if test=" handphone!= null and handphone !=''">
                handphone = #{handphone},
            </if>
            <if test=" telephone!= null and  telephone!=''">
                telephone = #{telephone},
            </if>
            <if test=" idcard!= null and idcard !=''">
                 idcard= #{idcard},
            </if>
            <if test=" email!= null and email !=''">
                 email= #{email},
            </if>
            <if test=" address!= null and  address!=''">
                 address= #{address},
            </if>
            <if test=" postcode!= null and  postcode!=''">
                postcode = #{postcode},
            </if>
            <if test=" rank!= null and  rank!=''">
                rank = #{rank},
            </if>
            <if test=" isTeather!= null and  isTeather!=''">
                 is_teacher= #{isTeather},
            </if>
            <if test=" cert!= null and  cert!=''">
                cert = #{cert},
            </if>
            <if test=" authTime!= null and  authTime!=''">
                auth_time = #{authTime},
            </if>
            <if test=" authUserType!= null and  authUserType!=''">
                 auth_user_type= #{authUserType},
            </if>
            <if test=" authUserId!= null and  authUserId!=''">
                 auth_user_id= #{authUserId},
            </if>
            <if test=" isWriter!= null and  isWriter!=''">
                 is_writer= #{isWriter},
            </if>
            <if test=" isExpert!= null and  isExpert!=''">
                is_expert = #{isExpert},
            </if>
            <if test=" avatar!= null and  avatar!=''">
                 avatar= #{avatar},
            </if>
            <if test=" note!= null and  note!=''">
                note = #{note},
            </if>
            <if test=" sort!= null and  sort!=''">
                sort = #{sort},
            </if>
            <if test=" isDeleted!= null and  isDeleted!=''">
                 is_deleted= #{isDeleted},
            </if>
        </set>
        WHERE
          id = #{id}
    </update>

    <delete id="delete" parameterType="int">
        DELETE FROM writer_user
        where id = #{id}
    </delete>

    <!--  批量删除 -->
    <delete id="deleteBatch" parameterType="list">
        DELETE FROM writer_user
        where id in
        <foreach collection="ids" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </delete>

    <select id="get" parameterType="int" resultType="WriterUser">
        SELECT
            *
        FROM
            writer_user
        WHERE
            id = #{id}
    </select>

    <select id="getListUser" resultType="WriterUser">
        SELECT
           *
        FROM
            writer_user
    </select>

    <select id="getByUserName" parameterType="string" resultType="WriterUser">
        SELECT
            *
        FROM
            writer_user
        WHERE
            username = #{username}
    </select>

    <select id="getListByRole" parameterType="int" resultType="WriterUser">
        SELECT
            tu.id,
            tu.username,
            tu.`password`,
            tu.is_disabled,
            tu.`org_id`,
            tu.`realname`
        FROM
            writer_user tu
        LEFT JOIN writer_user_role tur ON tu.id = tur.user_id
        LEFT JOIN writer_role tr ON tur.role_id = tr.id
        WHERE tr.id =#{rid}
    </select>

    <!-- 根据用户 id 查询这个用户拥有的所有资源（这里的资源就代表权限） -->
    <select id="getListAllResources" resultType="WriterPermission" parameterType="int">
        SELECT 	
        	tr.`id`,
        	tr.`parent_id`,
        	tr.`path`,
        	tr.`permission_name`,
        	tr.menu_name,
        	tr.url
        FROM `writer_permission` tr
        LEFT JOIN `write_role_permission` trr ON tr.`id` = trr.`resource_id`
        LEFT JOIN `writer_user_role` tur ON trr.`role_id` = tur.role_id
        WHERE tur.user_id = #{uid}
    </select>

    <!-- 根据用户 id 查询用户所具有的角色字符串表示 -->
    <select id="getListRoleSnByUser" parameterType="int" resultType="string">
        SELECT
           tr.role_name
        FROM `writer_role` tr
        LEFT JOIN `writer_user_role` tur ON tr.`id` = tur.role_id
        LEFT JOIN `writer_user` tu ON tur.`user_id` = tu.id
        WHERE tu.`id` = #{uid}
    </select>

    <!-- 根据用户 id 查询用户所具有的角色对象表示 -->
    <select id="getListUserRole" parameterType="int" resultType="WriterRole">
        SELECT
            tr.`id`,
            tr.`role_name`
        FROM `writer_role` tr
            LEFT JOIN `writer_user_role` tur ON tr.`id` = tur.role_id
            LEFT JOIN `writer_user` tu ON tur.`user_id` = tu.id
        WHERE tu.`id` = #{uid}
    </select>
    
	<!-- 新增一个作家用户 -->
	<insert id="addWriterUser" parameterType="WriterUser">
		insert into writer_user
		(username,password, is_disabled,org_id, realname, sex, birthday,
		experience, position, title, fax, handphone, telephone, idcard, email,
		address, postcode, rank, is_teacher, cert, auth_time, auth_user_type,
		auth_user_id,is_writer, is_expert, avatar, note, sort)
		values
		(#{username},#{password},#{isDisabled},#{orgId},#{realname},#{sex},#{birthday},#{experience},#{position},#{title},#{fax},#{handphone},#{telephone},#{idcard},#{email},#{address},#{postcode},#{rank},#{isTeather},#{cert},#{authTime},#{authUserType},#{authUserId},#{isWriter},#{isExpert},#{avatar},#{note},#{sort});
	</insert>
	<!-- 删除作家用户 -->
	<delete id="deleteWriterUserById" parameterType="String">
		delete from
		writer_user where id in
		<foreach collection="array" open="(" separator="," close=")"
			item="id">#{id}
		</foreach>
	</delete>
	<!-- 修改作家用户信息 -->
	<update id="updateWriterUserById" parameterType="WriterUser">
		update
		writer_user set
		username=#{username},password=#{password},org_id=#{orgId},realname=#{realname},sex=#{sex},birthday=#{birthday},experience=#{experience},position=#{position},title=#{title},fax=#{fax},handphone=#{handphone},telephone=#{telephone},idcard=#{idcard},email=#{email},address=#{address},postcode=#{postcode},rank=#{rank},cert=#{cert},avatar=#{avatar},note=#{note}
		where id=#{id};
	</update>
	<!-- 根据用户名查询作家用户 -->
	<select id="getWriterUserByUsername" parameterType="String"
		resultType="WriterUser">
		select * from
		writer_user where username=#{username};
	</select>
</mapper>
