<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bc.pmpheep.back.dao.PmphRoleDao">
	<sql id="key">
		<!-- 去掉最后一个, -->
		<trim suffixOverrides=",">
			<if test="roleName!=null and roleName !=''">
				role_name,
			</if>
			<if test="isDisabled!=null">
				is_disabled,
			</if>
			<if test="note!=null and note !=''">
				note,
			</if>
			<if test="sort!=null ">
				sort,
			</if>
			<if test="gmtCreate!=null">
				gmt_create,
			</if>
			<if test="gmtUpdate!=null">
				gmt_update,
			</if>
		</trim>
	</sql>
	<!-- sql片段对应?,id属性值任意 -->
	<sql id="value">
		<!-- 去掉最后一个, -->
		<trim suffixOverrides=",">
			<if test="roleName!=null and roleName !=''">
				#{roleName},
			</if>
			<if test="isDisabled!=null">
				#{isDisabled},
			</if>
			<if test="note!=null and note !=''">
				#{note},
			</if>
			<if test="sort!=null">
				#{sort},
			</if>
			<if test="gmtCreate!=null">
				#{gmtCreate},
			</if>
			<if test="gmtUpdate!=null">
				#{gmtUpdate},
			</if>
		</trim>
	</sql>
	<insert id="add" parameterType="PmphRole" useGeneratedKeys="true"
		keyProperty="id">
		INSERT INTO pmph_role
		(
		<include refid="key" />
		)
		VALUES
		(
		<include refid="value" />
		);
	</insert>

	<insert id="addUserRole" parameterType="map">
		INSERT INTO
		`pmph_user_role`(`user_id`,`role_id`)
		VALUES
		(
		#{userId},#{roleId}
		)
	</insert>

	<!-- 批量添加用户角色关联表数据 -->
	<insert id="addUserRoles" parameterType="map">
		INSERT INTO
		`pmph_user_role`(`user_id`,`role_id`)
		VALUES
		<foreach collection="roleIds" item="role_id" separator=",">
			(#{userId},#{role_id})
		</foreach>
	</insert>

	<insert id="addRoleResource" parameterType="list">
		INSERT INTO
		pmph_role_permission(role_id,permission_id)
		VALUES
		<foreach item="item" index="key" collection="list" open=""
			separator="," close="">
			(#{item.roleId}, #{item.permissionId})
		</foreach>
	</insert>

	<!-- 根据角色名称获取角色id -->
	<select id="getPmphRoleId" parameterType="java.lang.String"
		resultType="java.lang.Long">
		select
		id
		from
		pmph_role
		where
		role_name = #{roleName};
	</select>

	<!-- 查询表单的数据总数 -->
	<select id="getPmphRoleCount" resultType="Long">
		select
		count(*)
		from
		pmph_role
	</select>

	<select id="get" parameterType="Long" resultType="PmphRole">
		SELECT
		*
		FROM
		pmph_role
		WHERE
		id = #{id}
	</select>
	
	<select id="getByName" parameterType="java.util.Map" resultType="PmphRole">
		SELECT  * FROM pmph_role WHERE role_name = #{roleName}
	</select>
	
	<select id="getPmphRoleByUserId" parameterType="java.lang.Long" resultType="PmphRole">
		SELECT 
			* 
		FROM  
			`pmph_role` pr
		LEFT JOIN 
			`pmph_user_role` pur
		ON 
			pr.id = pur.role_id
		WHERE 
			pur.user_id=#{userId}
	</select>

	<select id="getListRole" parameterType="map" resultType="PmphRole">
		SELECT
			id,
			role_name,
			is_disabled,
			note,
			sort
		FROM
			pmph_role t1 where 1=1 and
		NOT EXISTS (
		SELECT
		id
		FROM
		pmph_role t2
		WHERE
		id IN (3, 4, 6, 7, 8, 12, 14)
		AND is_disabled = 1
		AND t1.id = t2.id
		)
		<if test="roleName != null and roleName!=''">
			and  ROLE_NAME LIKE CONCAT('%',CONCAT(#{roleName},'%')) or note like CONCAT('%',CONCAT(#{roleName},'%'))
		</if>
		order by 
			sort asc
	</select>
	
	<select id="listRole" resultType="PmphRoleVO">
		SELECT
		id,
		role_name
		FROM
		pmph_role where is_disabled = false;
	</select>

	<select id="getPmphRolePermissionByRoleId" parameterType="Long"
		resultType="PmphRolePermission">
		SELECT
		*
		FROM
		pmph_role_permission
		WHERE
		role_id = #{roleId}
	</select>

	<select id="getPmphRolePermissionIdByRoleId" parameterType="Long"
		resultType="Long">
		SELECT
		permission_id
		FROM
		pmph_role_permission
		WHERE
		role_id = #{roleId}
	</select>

	<select id="getUserRole" resultType="PmphUserRole"
		parameterType="map">
		SELECT
		id,
		user_id,
		role_id
		FROM
		pmph_user_role
		WHERE
		user_id = #{userId} AND role_id = #{roleId}
	</select>

	<!-- 根据角色 id 查询该角色 id 下的所有资源 -->
	<select id="getListRoleResource" parameterType="Long"
		resultType="PmphPermission">
		SELECT
		tr.`id`,
		tr.`parent_id`,
		tr.`path`,
		tr.`permission_name`,
		tr.`menu_name`,
		tr.`url`
		FROM
		`pmph_permission` tr
		LEFT JOIN
		`pmph_role_permission` trr
		ON
		tr.`id` = trr.`permission_id`
		WHERE
		trr.`role_id` = #{roleId}
	</select>

	<select id="getResourceRole" parameterType="map" resultType="PmphPermission">
		SELECT
		id,
		role_id,
		permission_id
		FROM
		pmph_role_permission
		WHERE
		role_id =#{roleId}
		AND
		permission_id = #{permissionId}
	</select>

	<update id="update" parameterType="PmphRole">
		UPDATE
		pmph_role
		<set>
			<if test="roleName != null and roleName!=''">
				role_name = #{roleName},
			</if>
			<if test="isDisabled != null">
				is_disabled = #{isDisabled},
			</if>
			<!-- <if test="note != null and note!=''">
				note = #{note},
			</if> -->
			<if test="sort != null">
				sort = #{sort},
			</if>
			note = #{note}
		</set>
		where id = #{id}
	</update>

	<delete id="deleteUserRole" parameterType="map">
		DELETE FROM
		pmph_user_role
		WHERE
		user_id = #{userId}
		AND
		role_id = #{roleId}
	</delete>

	<!-- 删除这个用户所有的角色 -->
	<delete id="deleteUserRoles">
		DELETE FROM
		pmph_user_role
		WHERE
		user_id = #{userId}
	</delete>

	<delete id="deleteRoleResource" parameterType="map">
		DELETE FROM
		pmph_role_permission
		WHERE
		role_id = #{roleId}
		AND
		permission_id = #{permissionId}
	</delete>

	<delete id="deleteRoleResourceByRoleId" parameterType="map">
		DELETE
		FROM
		pmph_role_permission
		WHERE
		role_id = #{roleId}
	</delete>

	<delete id="batchDeleteRoleResource" parameterType="list">
		DELETE FROM
		pmph_role_permission
		WHERE
		role_id
		IN
		<foreach collection="roleIds" item="roleId" open="("
			separator="," close=")">
			#{roleId}
		</foreach>
	</delete>

	<delete id="deleteRoleAndUser" parameterType="list">
		DELETE FROM
		pmph_user_role
		WHERE
		role_id
		in
		<foreach collection="ids" item="id" open="(" separator=","
			close=")">
			#{id}
		</foreach>
	</delete>

	<delete id="delete" parameterType="Long">
		DELETE FROM
		pmph_role
		WHERE
		id= #{id}
	</delete>

	<delete id="batchDelete" parameterType="list">
		DELETE FROM
		pmph_role
		WHERE
		id
		IN
		<foreach collection="ids" separator="," item="id" open="("
			close=")">
			#{id}
		</foreach>
	</delete>

	<!-- 根据用户id获取用户所拥有的角色 -->
	<select id="listPmphUserRoleByUserId" parameterType="Long"
		resultType="PmphRoleVO">
		SELECT r.id,r.role_name FROM pmph_user_role p LEFT JOIN
		pmph_role r ON p.role_id =r.id WHERE 
		p.user_id = #{id} AND r.is_disabled = false
	</select>
	<!-- 根据用户 id 和角色 id 加载一条用户角色关系数据集合 -->
	<select id="getUserRoleList" parameterType="Long" resultType="PmphUserRole">
		SELECT
		id,
		user_id,
		role_id
		FROM
		pmph_user_role
		WHERE
		user_id = #{userId} AND role_id = #{roleId}
	</select>

	<select id="userPermission" resultType="map">
		SELECT
	sum(t.materialAuthor) materialAuthor,t.permission_id
FROM
	(
		SELECT
			count(*) AS materialAuthor,prp.permission_id
		FROM
			pmph_user_role p
		LEFT JOIN pmph_role r ON p.role_id = r.id
		LEFT JOIN pmph_role_permission prp ON prp.role_id = p.role_id
		WHERE

			p.user_id = #{id}
		AND r.is_disabled IS FALSE
		AND prp.permission_id in(2,3,7,15,20,23)
		GROUP BY
			r.role_name,
			prp.permission_id
		ORDER BY
			role_name,
			permission_id
	) t group by t.permission_id
	</select>
</mapper>