<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bc.pmpheep.back.dao.ProductDao">


    <!--根据分类查出临床决策产品-->
    <select id="queryProductByProductType" resultMap="resultMapProductVO">
        select
        p.*
        -- if(p.is_new,true,false) AS is_active
        ,if(p.is_published = 1,new.gmt_set_active = p.gmt_set_active,p.is_new) as is_active
        ,pp.realname as publisher
        ,fu.realname as founder

        ,pu.id as u_id
        ,pu.auditor_id as u_uid
        ,u.realname  as u_realname

        ,pa.id as a_id
        ,pa.attachment as a_attachment
        ,pa.attachment_name as a_attachment_name
        ,pa.download as a_download
        ,pa.is_scan_img as a_is_scan_img

        ,pimg.id as pimg_id
        ,pimg.attachment as pimg_attachment
        ,pimg.attachment_name as pimg_attachment_name
        ,pimg.download as pimg_download
        ,pimg.is_scan_img as pimg_is_scan_img

        ,pe.id as pe_id
        ,pe.extension_name as pe_extension_name
        ,pe.is_required as pe_is_required
        from product  p
        left join (select id, gmt_set_active from product where  is_deleted = 0 and is_published = 1 and is_new = 1 and product_type = #{product_type} ORDER by gmt_set_active desc limit 1)new on new.id = p.id
        left join pmph_user pp on pp.id = p.publisher_id
        left join pmph_user fu on fu.id = p.founder_id
        left join product_auditor pu on pu.product_id = p.id left join pmph_user u on pu.auditor_id = u.id
        left join product_attachment pa on pa.product_id = p.id and pa.is_scan_img = 0 and pa.is_deleted = 0
        left join product_attachment pimg on pimg.product_id = p.id and pimg.is_scan_img = 1 and pimg.is_deleted = 0
        left join product_extension pe on pe.product_id = p.id and pe.is_deleted =0

        where p.product_type = #{product_type}

          and p.id = #{product_id}

    </select>

    <!--根据id查出临床决策产品-->
    <select id="queryProductById" parameterType="Long" resultMap="resultMapProductVO">
        select
        p.*
        ,pp.realname as publisher
        ,fu.realname as founder

        ,pu.id as u_id
        ,pu.auditor_id as u_uid
        ,u.realname  as u_realname

        ,pa.id as a_id
        ,pa.attachment as a_attachment
        ,pa.attachment_name as a_attachment_name
        ,pa.download as a_download
        ,pa.is_scan_img as a_is_scan_img

        ,pimg.id as pimg_id
        ,pimg.attachment as pimg_attachment
        ,pimg.attachment_name as pimg_attachment_name
        ,pimg.download as pimg_download
        ,pimg.is_scan_img as pimg_is_scan_img

        ,pe.id as pe_id
        ,pe.extension_name as pe_extension_name
        ,pe.is_required as pe_is_required

        from
        product p
        left join pmph_user pp on pp.id = p.publisher_id
        left join pmph_user fu on fu.id = p.founder_id
        left join product_auditor pu on pu.product_id = p.id left join pmph_user u on pu.auditor_id = u.id
        left join product_attachment pa on pa.product_id = p.id and pa.is_scan_img = 0 and pa.is_deleted = 0
        left join product_attachment pimg on pimg.product_id = p.id and pimg.is_scan_img = 1 and pimg.is_deleted = 0
        left join product_extension pe on pe.product_id = p.id and pe.is_deleted =0

        where p.id = #{product_id}
    </select>

    <resultMap id="resultMapProductVO" type="com.bc.pmpheep.back.vo.ProductVO">
        <id column="id" property="id" ></id>
        <result column="product_type" property="product_type"></result>
        <result column="product_name" property="product_name"></result>
        <result column="product_type" property="product_type"></result>
        <result column="is_published" property="is_published"></result>
        <result column="is_unit_advise_used" property="is_unit_advise_used"></result>
        <result column="is_unit_advise_required" property="is_unit_advise_required"></result>
        <result column="is_edu_exp_used" property="is_edu_exp_used"></result>
        <result column="is_edu_exp_required" property="is_edu_exp_required"></result>
        <result column="is_work_exp_used" property="is_work_exp_used"></result>
        <result column="is_work_exp_required" property="is_work_exp_required"></result>
        <result column="is_acade_used" property="is_acade_used"></result>
        <result column="is_acade_required" property="is_acade_required"></result>
        <result column="is_pmph_textbook_used" property="is_pmph_textbook_used"></result>
        <result column="is_pmph_textbook_required" property="is_pmph_textbook_required"></result>
        <result column="is_monograph_used" property="is_monograph_used"></result>
        <result column="is_monograph_required" property="is_monograph_required"></result>
        <result column="is_edit_book_used" property="is_edit_book_used"></result>
        <result column="is_edit_book_required" property="is_edit_book_required"></result>

        <result column="is_article_published_used" property="is_article_published_used"></result>
        <result column="is_article_published_required" property="is_article_published_required"></result>
        <result column="is_subject_type_used" property="is_subject_type_used"></result>
        <result column="is_subject_type_required" property="is_subject_type_required"></result>
        <result column="is_content_type_used" property="is_content_type_used"></result>
        <result column="is_content_type_required" property="is_content_type_required"></result>
        <result column="is_profession_type_used" property="is_profession_type_used"></result>
        <result column="is_profession_type_required" property="is_profession_type_required"></result>
        <result column="is_profession_award_used" property="is_profession_award_used"></result>
        <result column="is_profession_award_required" property="is_profession_award_required"></result>

        <result column="is_deleted" property="is_deleted"></result>
        <result column="gmt_create" property="gmt_create"></result>
        <result column="gmt_update" property="gmt_update"></result>
        <result column="founder_id" property="founder_id"></result>
        <result column="publisher_id" property="publisher_id"></result>
        <result column="gmt_publish" property="gmt_publish"></result>
        <result column="note" property="note"></result>
        <result column="description" property="description"></result>
        <result column="publisher" property="publisher"></result>
        <result column="founder" property="founder"></result>
        <result column="founderDepartment" property="founderDepartment"></result>
        <result column="is_active" property="is_active"></result>
        <result column="gmt_set_active" property="gmt_set_active"></result>
        <result column="actualDeadline" property="actualDeadline"></result>
        <result column="is_new" property="is_new"></result>

        <collection property="auditorList" javaType="java.util.List" ofType="com.bc.pmpheep.back.po.ProductAuditor">
            <id column="u_id" property="id"></id>
            <result column="u_uid" property="auditor_id"></result>
            <!--<result column="id" property="product_id"></result>-->
            <result column="u_realname" property="auditor_name"></result>
        </collection>
        <collection property="productExtensionList" javaType="java.util.List" ofType="com.bc.pmpheep.back.po.ProductExtension">
            <id column="pe_id" property="id"></id>
            <!--<result column="id" property="productId"></result>-->
            <result column="pe_extension_name" property="extensionName"></result>
            <result column="pe_is_required" property="isRequired"></result>
        </collection>
        <collection property="productAttachmentList" javaType="java.util.List" ofType="com.bc.pmpheep.back.po.ProductAttachment">
            <id column="a_id" property="id"></id>
            <!--<result column="id" property="product_id"></result>-->
            <result column="a_attachment" property="attachment"></result>
            <result column="a_attachment_name" property="name"></result>
            <result column="a_download" property="download"></result>
            <result column="a_is_scan_img" property="is_scan_img"></result>
        </collection>
        <collection property="producntImgList" javaType="java.util.List" ofType="com.bc.pmpheep.back.po.ProductAttachment">
            <id column="pimg_id" property="id"></id>
            <!--<result column="id" property="product_id"></result>-->
            <result column="pimg_attachment" property="attachment"></result>
            <result column="pimg_attachment_name" property="name"></result>
            <result column="pimg_download" property="download"></result>
            <result column="pimg_is_scan_img" property="is_scan_img"></result>
        </collection>
    </resultMap>


    <update id="updateProductAttachmenDownLoadCountsByAttachment" parameterType="String">
        update product_attachment set download = download +1 where id = #{id}
    </update>

    <sql id="key">
        <!-- 去掉最后一个, -->
        <trim suffixOverrides=",">
            <if test="id!=null">
                id,
            </if>
            <if test="product_name!=null and product_name!=''">
                product_name,
            </if>
            <if test="product_type!=null">
                product_type,
            </if>
            <if test="is_published!=null">
                is_published,
            </if>
            <if test="is_unit_advise_used!=null">
                is_unit_advise_used,
            </if>
            <if test="is_unit_advise_required!=null">
                is_unit_advise_required,
            </if>
            <if test="is_edu_exp_used!=null">
                is_edu_exp_used,
            </if>
            <if test="is_edu_exp_required!=null">
                is_edu_exp_required,
            </if>
            <if test="is_work_exp_used!=null">
                is_work_exp_used,
            </if>
            <if test="is_work_exp_required!=null">
                is_work_exp_required,
            </if>
            <if test="is_acade_used!=null">
                is_acade_used,
            </if>
            <if test="is_acade_required!=null">
                is_acade_required,
            </if>
            <if test="is_pmph_textbook_used!=null">
                is_pmph_textbook_used,
            </if>
            <if test="is_pmph_textbook_required!=null">
                is_pmph_textbook_required,
            </if>
            <if test="is_monograph_used!=null">
                is_monograph_used,
            </if>
            <if test="is_monograph_required!=null">
                is_monograph_required,
            </if>
            <if test="is_edit_book_used!=null">
                is_edit_book_used,
            </if>
            <if test="is_edit_book_required!=null">
                is_edit_book_required,
            </if>

            <if test="is_article_published_used!=null">
                is_article_published_used,
            </if>
            <if test="is_article_published_required!=null">
                is_article_published_required,
            </if>
            <if test="is_subject_type_used!=null">
                is_subject_type_used,
            </if>
            <if test="is_subject_type_required!=null">
                is_subject_type_required,
            </if>
            <if test="is_content_type_used!=null">
                is_content_type_used,
            </if>
            <if test="is_content_type_required!=null">
                is_content_type_required,
            </if>
            <if test="is_profession_type_used!=null">
                is_profession_type_used,
            </if>
            <if test="is_profession_type_required!=null">
                is_profession_type_required,
            </if>
            <if test="is_profession_award_used!=null">
                is_profession_award_used,
            </if>
            <if test="is_profession_award_required!=null">
                is_profession_award_required,
            </if>



            <if test="is_deleted!=null">
                is_deleted,
            </if>
            <if test="founder_id!=null">
                founder_id,
            </if>
            <if test="publisher_id!=null">
                publisher_id,
            </if>
            <if test="gmt_publish!=null">
                gmt_publish,
            </if>
            <if test="note!=null">
                note,
            </if>
            <if test="description!=null">
                description,
            </if>
            <if test="actualDeadline!=null">
                actualDeadline,
            </if>
            <if test="is_active">
                gmt_set_active,
                is_new,
            </if>
        </trim>
    </sql>

    <!-- sql片段对应?,id属性值任意 -->
    <sql id="value">
    <!-- 去掉最后一个, -->
        <trim suffixOverrides=",">
            <if test="id!=null">
                #{id},
            </if>

            <if test="product_name!=null and product_name != ''">
                #{product_name},
            </if>
            <if test="product_type!=null">
                #{product_type},
            </if>
            <if test="is_published!=null">
                #{is_published},
            </if>
            <if test="is_unit_advise_used!=null">
                #{is_unit_advise_used},
            </if>
            <if test="is_unit_advise_required!=null">
                #{is_unit_advise_required},
            </if>
            <if test="is_edu_exp_used!=null">
                #{is_edu_exp_used},
            </if>
            <if test="is_edu_exp_required!=null">
                #{is_edu_exp_required},
            </if>
            <if test="is_work_exp_used!=null">
                #{is_work_exp_used},
            </if>
            <if test="is_work_exp_required!=null">
                #{is_work_exp_required},
            </if>
            <if test="is_acade_used!=null">
                #{is_acade_used},
            </if>
            <if test="is_acade_required!=null">
                #{is_acade_required},
            </if>
            <if test="is_pmph_textbook_used!=null">
                #{is_pmph_textbook_used},
            </if>
            <if test="is_pmph_textbook_required!=null">
                #{is_pmph_textbook_required},
            </if>
            <if test="is_monograph_used!=null">
                #{is_monograph_used},
            </if>
            <if test="is_monograph_required!=null">
                #{is_monograph_required},
            </if>
            <if test="is_edit_book_used!=null">
                #{is_edit_book_used},
            </if>
            <if test="is_edit_book_required!=null">
                #{is_edit_book_required},
            </if>

            <if test="is_article_published_used!=null">
                #{is_article_published_used},
            </if>
            <if test="is_article_published_required!=null">
                #{is_article_published_required},
            </if>
            <if test="is_subject_type_used!=null">
                #{is_subject_type_used},
            </if>
            <if test="is_subject_type_required!=null">
                #{is_subject_type_required},
            </if>
            <if test="is_content_type_used!=null">
                #{is_content_type_used},
            </if>
            <if test="is_content_type_required!=null">
                #{is_content_type_required},
            </if>
            <if test="is_profession_type_used!=null">
                #{is_profession_type_used},
            </if>
            <if test="is_profession_type_required!=null">
                #{is_profession_type_required},
            </if>
            <if test="is_profession_award_used!=null">
                #{is_profession_award_used},
            </if>
            <if test="is_profession_award_required!=null">
                #{is_profession_award_required},
            </if>

            <if test="is_deleted!=null">
                #{is_deleted},
            </if>
            <if test="founder_id!=null">
                #{founder_id},
            </if>
            <if test="publisher_id!=null">
                #{publisher_id},
            </if>
            <if test="gmt_publish!=null">
                #{gmt_publish},
            </if>
            <if test="note!=null">
                #{note},
            </if>
            <if test="description!=null">
                #{description},
            </if>
            <if test="actualDeadline!=null">
                #{actualDeadline},
            </if>
            <if test="is_active">
                 now(),
                1
            </if>
        </trim>
    </sql>

    <sql id="update">
        <trim suffixOverrides=",">
            <if test="id!=null">
               id =#{id},
            </if>
            <if test="product_name != null and product_name !=  '' ">
                product_name	=	#{product_name}	,
            </if>
            <if test="product_type != null ">
                product_type	=	#{product_type}	,
            </if>
            <if test="is_published != null ">
                is_published	=	#{is_published}	,
            </if>
            <if test="is_unit_advise_used != null ">
                is_unit_advise_used	=	#{is_unit_advise_used}	,
            </if>
            <if test="is_unit_advise_required != null ">
                is_unit_advise_required	=	#{is_unit_advise_required}	,
            </if>
            <if test="is_edu_exp_used != null ">
                is_edu_exp_used	=	#{is_edu_exp_used}	,
            </if>
            <if test="is_edu_exp_required != null ">
                is_edu_exp_required	=	#{is_edu_exp_required}	,
            </if>
            <if test="is_work_exp_used != null ">
                is_work_exp_used	=	#{is_work_exp_used}	,
            </if>
            <if test="is_work_exp_required != null ">
                is_work_exp_required	=	#{is_work_exp_required}	,
            </if>
            <if test="is_acade_used != null ">
                is_acade_used	=	#{is_acade_used}	,
            </if>
            <if test="is_acade_required != null ">
                is_acade_required	=	#{is_acade_required}	,
            </if>
            <if test="is_pmph_textbook_used != null ">
                is_pmph_textbook_used	=	#{is_pmph_textbook_used}	,
            </if>
            <if test="is_pmph_textbook_required != null ">
                is_pmph_textbook_required	=	#{is_pmph_textbook_required}	,
            </if>
            <if test="is_monograph_used != null ">
                is_monograph_used	=	#{is_monograph_used}	,
            </if>
            <if test="is_monograph_required != null ">
                is_monograph_required	=	#{is_monograph_required}	,
            </if>
            <if test="is_edit_book_used != null ">
                is_edit_book_used	=	#{is_edit_book_used}	,
            </if>
            <if test="is_edit_book_required != null ">
                is_edit_book_required	=	#{is_edit_book_required}	,
            </if>

            <if test="is_article_published_used!=null">
                is_article_published_used=#{is_article_published_used},
            </if>
            <if test="is_article_published_required!=null">
                is_article_published_required= #{is_article_published_required},
            </if>
            <if test="is_subject_type_used!=null">
                is_subject_type_used= #{is_subject_type_used},
            </if>
            <if test="is_subject_type_required!=null">
                is_subject_type_required= #{is_subject_type_required},
            </if>
            <if test="is_content_type_used!=null">
                is_content_type_used=#{is_content_type_used},
            </if>
            <if test="is_content_type_required!=null">
                is_content_type_required= #{is_content_type_required},
            </if>
            <if test="is_profession_type_used!=null">
                is_profession_type_used=#{is_profession_type_used},
            </if>
            <if test="is_profession_type_required!=null">
                is_profession_type_required= #{is_profession_type_required},
            </if>
            <if test="is_profession_award_used!=null">
                is_profession_award_used= #{is_profession_award_used},
            </if>
            <if test="is_profession_award_required!=null">
                is_profession_award_required=  #{is_profession_award_required},
            </if>

            <if test="is_deleted != null ">
                is_deleted	=	#{is_deleted}	,
            </if>
            <if test="founder_id != null ">
                founder_id	=	#{founder_id}	,
            </if>
            <if test="publisher_id != null ">
                publisher_id	=	#{publisher_id}	,
            </if>
            <if test="gmt_publish != null ">
                gmt_publish	=	#{gmt_publish}	,
            </if>
            <if test="note != null ">
                note	=	#{note}	,
            </if>
            <if test="description!=null">
                description= #{description},
            </if>
            <if test="actualDeadline!=null">
                actualDeadline= #{actualDeadline},
            </if>
            <if test="is_active">
                gmt_set_active = now(),
                is_new = 1
            </if>
            <if test="!is_active">
                is_new = 0
            </if>
        </trim>
    </sql>


    <!--新增或修改主表
     * insert on duplicate key update 主表product 其中 unique键除主键外 还有product_type
     * keyProperty设为id 若插入 则将生成的id传回到productVO的id中 便于附表关联之-->
    <insert id="saveProduct" useGeneratedKeys="true" keyProperty="id" parameterType="com.bc.pmpheep.back.vo.ProductVO">
        <if test="is_published and is_active">
            UPDATE product t2 SET t2.is_new = 0  WHERE  t2.product_type = #{product_type} AND t2.is_published = 1;
        </if>
        insert into product
        (
          <include refid="key" />
        )
        values(
          <include refid="value" />

        )
        on Duplicate key update
          <include refid="update"/>
    </insert>

    <!--逻辑删除-->
    <update id="deleteProductExtension" parameterType="Long" >
        update product_extension set is_deleted = 1 where product_id = #{product_id};
    </update>

    <!--为了保留历史申报里的关联扩展项填写内容
     * 扩展项要伪删除，先按产品分类全部伪删除，再将传入id的insert on duplicate key update-->
    <update id="saveProductExtension" parameterType="java.util.List">
        insert into product_extension
        (
            id,
            product_id	,
            extension_name	,
            is_required	,
            is_deleted
        )
        VALUES 
        <foreach collection="list" index="index" item="item" separator="," >
            (#{ item.id }, /*新增的扩展项，此处为null，主键会自增填充，修改的则会主键冲突，触发修改*/
            #{	item.productId	}	,
            #{	item.extensionName	}	,
            #{	item.isRequired	}	,
            0)
        </foreach>
        on duplicate key UPDATE
            product_id	=	values(	product_id	)	,
            extension_name	=	values(	extension_name	)	,
            is_required	=	values(	is_required	)	,
            is_deleted	=	values(	is_deleted	);
    </update>

    <delete id="deleteProductAuditorsByProductId" parameterType="Long">
        delete from product_auditor where product_id = #{product_id}
    </delete>

    <!--插入审核人 ，若主键冲突（已有的）什么也不做-->
    <insert id="saveProductAuditors" parameterType="java.util.List">
        insert into product_auditor
        (
        id,product_id,auditor_id
        )
        VALUES
        <foreach collection="list" item="item"  separator=",">
            (#{item.id} , #{item.product_id} , #{item.auditor_id})
        </foreach>
        on duplicate key UPDATE product_id = product_id /*VALUES(product_id) ,auditor_id=VALUES (auditor_id)*/
    </insert>

    <insert id="createAttachment" parameterType="com.bc.pmpheep.back.po.ProductAttachment" keyProperty="id" useGeneratedKeys="true">
        insert into product_attachment
        (
            id	,
            product_id	,
            attachment	,
            attachment_name	,
            download	,
            is_deleted	,
            is_scan_img
        )
        VALUES
        (
            #{	id	}	,
            #{	product_id	}	,
            #{	attachment	}	,
            #{	name	}	,
            0	,
            0	,
            #{	is_scan_img	}
        )
        on duplicate key UPDATE attachment = VALUES(attachment)
    </insert>

    <!--删除附件-->
    <delete id="deleteProductAttachmentByProductId" parameterType="java.lang.Long">
        delete from product_attachment where product_id = #{product_id}
    </delete>

    <!--插入附件 ，若主键冲突（已有的）什么也不做-->
    <insert id="saveProductAttachments" parameterType="java.util.List">
        insert into product_attachment
        (
            id	,
            product_id	,
            attachment	,
            attachment_name	,
            download	,
            is_deleted	,
            is_scan_img
        )
        VALUES
        <foreach collection="list" item="item"  separator="," >
            (
            #{	item.id	}	,
            #{	item.product_id	}	,
            #{	item.attachment	}	,
            #{	item.name	}	,
            0	,
            0	,
            #{	item.is_scan_img	})
        </foreach>
        on duplicate key UPDATE attachment=VALUES(attachment)

    </insert>

    <select id="queryList" resultMap="resultMapProductVO" parameterType="com.bc.pmpheep.back.plugin.PageParameter">
        select * from (SELECT p.*
        ,if( p.is_published = 1,new.gmt_set_active = p.gmt_set_active,is_new) as is_active
        /*,p.is_published = 1 and is_new as is_active*/
        ,u.realname as founder
        ,pu.realname as publisher
        ,d.dp_name as founderDepartment
        FROM
        product p
        left join pmph_user u on p.founder_id = u.id
        left join pmph_user pu on p.publisher_id = pu.id
        left join pmph_department d on d.id = u.department_id
        left join (select id, gmt_set_active from product
        <where>
            is_deleted = 0 and is_published = 1 and is_new = 1
            <if test="
            parameter.product_type != null ">
                            and product_type = #{parameter.product_type}
                        </if>
                    </where>
                    ORDER by gmt_set_active desc limit 1)new on new.id = p.id
        <where>
            <if test="parameter.product_name != null and parameter.product_name !='' ">
                and p.product_name like concat('%',#{parameter.product_name},'%')
            </if>
            <if test="parameter.is_published != null">
                and p.is_published = #{parameter.is_published}
            </if>
            <if test="parameter.product_type != null ">
                and p.product_type = #{parameter.product_type}
            </if>
            <if test="parameter.product_type_list_str != null and parameter.product_type_list_str != '' ">
                and p.product_type in (${parameter.product_type_list_str})
            </if>


            <if test="parameter.is_active">
                order by p.gmt_set_active and p.is_deleted = 0 and p.is_published = 1 and p.is_new = 1 DESC limit 1
            </if>
        </where>)p
        ORDER BY  p.is_new desc ,p.is_published desc, p.gmt_set_active desc
        limit #{start},#{pageSize}
    </select>

    <select id="queryListCount" parameterType="com.bc.pmpheep.back.plugin.PageParameter" resultType="int">
        SELECT count(id) FROM
        product
        <where>
            <if test="parameter.product_name != null and parameter.product_name !='' ">
                and product_name like concat('%',#{parameter.product_name},'%')
            </if>
            <if test="(parameter.is_published != null)">
                and is_published = #{parameter.is_published}
            </if>

            <if test="parameter.product_type != null ">
                and product_type = #{parameter.product_type}
            </if>
            <if test="parameter.product_type_list_str != null and parameter.product_type_list_str != '' ">
                and product_type in (${parameter.product_type_list_str})
            </if>
            <if test="parameter.is_active">
                order by gmt_set_active and is_deleted = 0 and is_published = 1 and is_new = 1 DESC limit 1
            </if>
        </where>
    </select>


    <!-- 根据productId导出已发布的学校-->
    <select id="getOutPutExclOrgByProduct" parameterType="java.lang.Long" resultType="com.bc.pmpheep.back.vo.OrgExclVO">
        SELECT
        o.`org_name`,
        ou.`username`,
        m.`product_name` as material_name
        FROM
        product m
        LEFT JOIN
        `product_org` mo
        ON
        m.`id`= mo.`product_id`
        LEFT JOIN
        org o
        ON
        mo.`org_id` = o.`id`
        LEFT JOIN
        `org_user` ou
        ON
        o.`id` = ou.`org_id`
        WHERE
        m.`is_published`=TRUE
        AND
        product_id=#{productId}
    </select>


   <!-- 发布临床-机构-->
    <insert id="addProductOrgs" parameterType="java.util.List" >
        insert into product_org (product_id,org_id)  values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.productId},#{item.orgId})
        </foreach>
    </insert>

    <!--跟新发布状态-->
    <update id="updateProduct" parameterType="com.bc.pmpheep.back.vo.ProductVO">
        <if test="is_active"> /*此处is_active 代表 is_new*/
            UPDATE product t2 SET t2.is_new = 0  WHERE
            t2.product_type = (SELECT t3.* FROM (SELECT t1.product_type FROM product t1 WHERE t1.id = #{id} ) t3 ) AND t2.is_published = 1;
        </if>

        update product set is_published = #{is_published}, publisher_id = #{publisher_id},gmt_publish=#{gmt_publish}
        <if test="is_active"> /*此处is_active 代表 is_new*/
        ,is_new = 1
        </if>
        <!-- <if test="is_active">
             ,gmt_set_active = now()
         </if>-->
         where id = #{id}
    </update>

    <!--获取是否勾选了 当前产品公告 is_new-->
    <select id="getIsActiveByProductId" parameterType="java.lang.Long" resultType="java.lang.Boolean">
        select is_new from product where id = #{id}
    </select>

    <!--根据临床id 获取临床-机构信息-->
    <select id="getListProductOrgByProductId" parameterType="java.lang.Long" resultType="java.lang.Long">
         select org_id from product_org where product_id = #{productId}
    </select>

    <select id="listProductHistory" parameterType="pageParameter" resultType="ProductHistorylVO">
        SELECT
        m.`id`,
        m.`product_name`,
        COUNT(mo.`org_id`) orgCounts,
        m.`gmt_create`,
        t.count
        FROM
        `product` m
        LEFT JOIN
        `product_org` mo
        ON
        m.`id` = mo.`product_id`,
        (
        SELECT
        COUNT(*) `count`
        FROM
        `product` m
        WHERE
        m.`is_published` = TRUE
        AND
        m.`is_deleted`=FALSE
        )t
        WHERE
        m.`is_published` = TRUE
        AND
        m.`is_deleted`=FALSE
        GROUP BY
        m.`id`
        ORDER BY
        m.`gmt_create` DESC
        <if test="pageSize != null">
            LIMIT #{start} , #{pageSize}
        </if>
    </select>

    <!--获取临床集合-->
    <select id="getListProduct" parameterType="java.lang.String" resultType="Product">
        select * from product where product_name = #{productName}
    </select>

   <!-- 根据产品id 获取产品的名字-->
    <select id="getProductNameById" parameterType="long" resultType="string">
        select product_name  from product where id=#{materialId}
    </select>

    <!--根据产品id 获取到审核人-->
    <select id="getAuthorList" parameterType="long" resultType="java.lang.Long">
        select auditor_id from product_auditor where product_id = #{productId}
    </select>

    <!--获取所有审核人的名字-->
    <select id="getAllAuthorName" parameterType="long" resultType="string">
         select t.realname from
          (SELECT GROUP_CONCAT(pu.realname) realname, 'group' groupByName FROM product_auditor pa LEFT JOIN pmph_user pu on pa.auditor_id = pu.id
              WHERE product_id = #{productId} group by groupByName)t
    </select>

    <!--获取到审核者的openid-->
    <select id="getAuthorOpenid" parameterType="java.util.List" resultType="java.lang.String">
        select pu.openid  FROM product_auditor pa INNER JOIN pmph_user pu on pa.auditor_id = pu.id where pa.auditor_id in
        <foreach item="auditorId" collection="list" open="(" separator=","
                 close=")">
            #{auditorId}
        </foreach>
    </select>

</mapper>